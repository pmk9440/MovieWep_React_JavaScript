{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","title","poster","genres","synopsis","className","MoviePoster","alt","map","genre","index","MovieGenre","key","text","maxLine","ellipsis","trimRight","basedOn","src","prototype","PropTypes","string","isRequired","array","App","state","_renderMovies","movies","movie","console","log","id","title_english","medium_cover_image","_getMovies","a","_callApi","setState","fetch","then","response","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6WAKA,SAASA,EAAT,GAAkD,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACnC,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACC,EAAD,CAAaJ,OAAQA,EAAQK,IAAKN,KAEtC,yBAAKI,UAAU,iBACX,4BAAKJ,GACL,yBAAKI,UAAU,gBACVF,EAAOK,IAAI,SAACC,EAAOC,GAAR,OAAkB,kBAACC,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,OAEjE,yBAAKL,UAAU,kBACf,kBAAC,IAAD,CACIQ,KAAMT,EACNU,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,eAQ5B,SAASX,EAAT,GAAoC,IAAdJ,EAAa,EAAbA,OAAQK,EAAK,EAALA,IAC1B,OACI,yBAAKF,UAAU,eAAea,IAAKhB,EAAQK,IAAKA,EAAKN,MAAOM,IAIpE,SAASI,EAAT,GAA6B,IAARF,EAAO,EAAPA,MACjB,OACI,0BAAMJ,UAAU,eAAeI,GAIvCT,EAAMmB,UAAY,CACdlB,MAAOmB,IAAUC,OAAOC,WACxBpB,OAAQkB,IAAUC,OAAOC,WACzBnB,OAAQiB,IAAUG,MAAMD,WACxBlB,SAAUgB,IAAUC,OAAOC,YAG/BhB,EAAYa,UAAY,CACpBjB,OAAQkB,IAAUC,OAAOC,WACzBf,IAAKa,IAAUC,OAAOC,YAG1BX,EAAWQ,UAAY,CACnBV,MAAMW,IAAUC,OAAOC,YAGZtB,QCdAwB,E,2MAtCbC,MAAQ,G,EAMRC,cAAgB,WAKd,OAJe,EAAKD,MAAME,OAAOnB,IAAI,SAACoB,EAAOlB,GAE3C,OADAmB,QAAQC,IAAIF,GACL,kBAAC,EAAD,CAAOhB,IAAKgB,EAAMG,GAAI9B,MAAO2B,EAAMI,cAAe9B,OAAQ0B,EAAMK,mBAAoB9B,OAAQyB,EAAMzB,OAAQC,SAAUwB,EAAMxB,c,EAKrI8B,W,qBAAa,4BAAAC,EAAA,qEACU,EAAKC,WADf,OACLT,EADK,OAEX,EAAKU,SAAS,CACZV,WAHS,yC,EAObS,SAAW,WACT,OAAOE,MAAM,6DACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,SACvBgB,MAAM,SAAAC,GAAG,OAAIf,QAAQC,IAAIc,M,mFAtB1BC,KAAKX,e,+BAyBG,IACAP,EAAWkB,KAAKpB,MAAhBE,OACR,OACE,yBAAKtB,UAAWsB,EAAS,MAAQ,gBAC9BA,EAASkB,KAAKnB,gBAAkB,e,GAlCvBoB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.6faece4b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\nimport LinesEllipsis from 'react-lines-ellipsis';\n\nfunction Movie({title, poster, genres, synopsis}){\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie_Columns\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie_Columns\">\n                <h1>{title}</h1>\n                <div className=\"Movie_Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n                </div>\n                <div className=\"Movie_Synopsis\">\n                <LinesEllipsis\n                    text={synopsis}\n                    maxLine='3'\n                    ellipsis='...'\n                    trimRight\n                    basedOn='letters'\n                />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction MoviePoster({poster, alt}){\n    return (\n        <img className=\"Movie_Poster\" src={poster} alt={alt} title={alt}/>\n    )\n}\n\nfunction MovieGenre({genre}){\n    return (\n        <span className=\"Movie_Genre\">{genre}</span>\n    )\n}\n\nMovie.prototype = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.prototype = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\nMovieGenre.prototype = {\n    genre:PropTypes.string.isRequired\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  state = { }\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie, index) => {\n      console.log(movie)\n      return <Movie key={movie.id} title={movie.title_english} poster={movie.medium_cover_image} genres={movie.genres} synopsis={movie.synopsis}/>\n    })\n    return movies\n  }\n  \n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch(\"https://yts.lt/api/v2/list_movies.json?sort_by=like_count\")\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}